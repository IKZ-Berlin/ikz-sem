#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.basesections import Experiment, Entity, Process, Measurement
from nomad.datamodel.data import EntryData
import numpy as np
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    MSection,
    Package,
    Quantity,
    SubSection,
    MEnum,
    Reference,
    Datetime,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
    Author,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='Scanning Electron Microscopy Support')

class Bedampfen(Process, EntryData, ArchiveSection):
    m_def = Section()
    hallo = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )


class ScanningElectronMicroscopy(Experiment, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Date = Quantity(
        type=Datetime,
        a_eln={
            "component": "DateTimeEditQuantity"
        },
    )
    hallo = Quantity(
        type=Author,
        a_eln={
            "component": "AuthorEditQuantity"
        },
    )
    sample_from = Quantity(
        type=Author,
        a_eln={
            "component": "AuthorEditQuantity"
        },
    )
    equipment = Quantity(
        type=MEnum(['Nova 600', 'Apreo S']),
        a_eln={
            "component": "EnumEditQuantity"
        },
        shape=["2"],
    )
    measurement_method = Quantity(
        type=MEnum(['Images', 'EDX', 'EBSD', 'CL']),
        a_eln={
            "component": "EnumEditQuantity"
        },
        shape=["4"],
    )
    material = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    sampleID = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
        base_sections=["nomad.datamodel.data.EntryData"],
    )
    reference = Quantity(
        type=Entity,
        description='',
        a_eln={
            "component": "ReferenceEditQuantity"
        },
        shape=["*"],
    )
    preperation = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    goal_or_question = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
        shape=["*"],
    )
    summary = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
        shape=["*"],
    )
    data_file = Quantity(
        type=str,
        description='''
        #The png file name.
        ''',
        a_eln={
            "component": "FileEditQuantity"
        },
        a_browser={
            "adaptor": "RawFileAdaptor"
        },
        shape=["*"],
    )
    data_link = Quantity(
        type=str,
        description='',
        a_eln={
            "component": "URLEditQuantity"
        },
        shape=["*"],
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `ElectronMicroscopy` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


m_package.__init_metainfo__()
